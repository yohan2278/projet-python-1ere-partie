import tkinter as tk
from tkinter import ttk
from collections import Counter
import re
import csv
from bs4 import BeautifulSoup
from urllib.parse import urlparse
import requests

# Première Interface
class PremiereInterface:
    def __init__(self, master):
        self.master = master
        master.title("Analyse de Référencement - Première Interface")

        # Éléments de la première interface
        self.label_url = ttk.Label(master, text="URL de la première page:")
        self.entry_url = ttk.Entry(master)
        self.label_keywords = ttk.Label(master, text="Mots clés (séparés par des virgules):")
        self.entry_keywords = ttk.Entry(master)
        self.btn_analyze = ttk.Button(master, text="Lancer l'analyse", command=self.launch_analysis)

        # Disposition des éléments
        self.label_url.pack(pady=10)
        self.entry_url.pack(pady=5)
        self.label_keywords.pack(pady=10)
        self.entry_keywords.pack(pady=5)
        self.btn_analyze.pack(pady=20)

    def launch_analysis(self):
        # Récupérer les valeurs saisies par l'utilisateur
        url = self.entry_url.get()
        keywords = [kw.strip() for kw in self.entry_keywords.get().split(",")]

        # Passer à la deuxième interface avec les données saisies
        self.master.withdraw()  # Masquer la première interface
        DeuxiemeInterface(self.master, url, keywords)


# Deuxième Interface
class DeuxiemeInterface:
    def __init__(self, master, url, keywords):
        self.master = master
        master.title("Analyse de Référencement - Deuxième Interface")

        # Éléments de la deuxième interface
        self.label_resultats = ttk.Label(master, text="Résultats de l'analyse:")
        self.text_resultats = tk.Text(master, wrap=tk.WORD, height=20, width=80)
        self.btn_sauvegarder = ttk.Button(master, text="Sauvegarder le rapport", command=self.sauvegarder_rapport)

        # Disposition des éléments
        self.label_resultats.pack(pady=10)
        self.text_resultats.pack(pady=5)
        self.btn_sauvegarder.pack(pady=20)

        # Effectuer l'analyse
        self.analyser_page(url, keywords)

    def analyser_page(self, url, keywords):
        # Récupérer le contenu HTML de l'URL
        contenu_html = recuperer_contenu_html(url)

        if contenu_html:
            # Supprimer les balises HTML du contenu
            texte_sans_html = supprimer_balises_html(contenu_html)

            # Obtenir les occurrences des mots-clés
            occurrences_mots_clefs = obtenir_mots_clefs(texte_sans_html)

            # Filtrer les occurrences pour les mots-clés spécifiés
            occurrences_mots_clefs_filtrees = filtrer_mots_parasites(occurrences_mots_clefs, keywords)

            # Afficher les résultats dans la zone de texte
            self.afficher_resultats(occurrences_mots_clefs_filtrees)

    def afficher_resultats(self, resultats):
        # Afficher les résultats dans la zone de texte
        for mot, occ in resultats:
            self.text_resultats.insert(tk.END, f"{mot}: {occ}\n")

    def sauvegarder_rapport(self):
        # Ajouter la logique pour sauvegarder le rapport dans le format souhaité
        pass


# Créer une instance de Tkinter
root = tk.Tk()

# Créer l'interface principale (première interface)
interface = PremiereInterface(root)

# Lancer la boucle principale de Tkinter
root.mainloop()
